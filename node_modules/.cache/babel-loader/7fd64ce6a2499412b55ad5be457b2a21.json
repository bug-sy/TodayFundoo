{"ast":null,"code":"var _jsxFileName = \"/Users/rakesh/Desktop/newsignup/src/components/Pages/Parsing.js\";\nimport React from 'react';\nimport ClickAwayforNotes from '../ClickAwayforNotes.js';\nimport { toggleGridorList } from '../UsingRedux';\nimport Board from '../Board';\nimport { connect } from 'react-redux';\nimport { newPostRef } from '/Users/rakesh/Desktop/newsignup/src/firebase.js';\nimport List from '/Users/rakesh/Desktop/newsignup/src/components/List.js';\nimport data from '/Users/rakesh/Desktop/newsignup/src/sampleData.js';\nimport { createUserNote, getNotes, updateNote } from '/Users/rakesh/Desktop/newsignup/src/firebase.js';\nimport { Typography } from '@material-ui/core';\n\nclass NoteInputandOutput extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      boards: [],\n      notes: null,\n      archiveStatus: false,\n      pinStatus: false,\n      trashStatus: false\n    };\n\n    this.handleTrashStatusTrue = noteId => {\n      let obj = this.getNodeObj();\n      obj.trashStatus = true;\n      updateNote(noteId, obj);\n    };\n\n    this.handlePinStatusTrue = (noteId, TorF) => {\n      let obj = this.getNodeObj();\n      obj.pinStatus = TorF;\n      updateNote(noteId, obj);\n    };\n\n    this.handleArchiveStatusTrue = noteId => {\n      let obj = this.getNodeObj();\n      obj.archiveStatus = true;\n      updateNote(noteId, obj);\n    };\n\n    this.getNodeObj = () => {\n      var nodeObj = {\n        pinStatus: this.state.pinStatus,\n        archiveStatus: this.state.archiveStatus,\n        trashStatus: this.state.trashStatus\n      };\n      return nodeObj;\n    };\n\n    this.createNewBoard = async board => {\n      try {\n        const uid = localStorage.getItem('uid');\n        console.log('app : ' + uid);\n        newPostRef.ref('/users /' + uid + '/notes/').push(board);\n        this.setState({\n          boards: [...this.state.boards, board]\n        });\n      } catch (error) {\n        console.error('Error creating new board: ', error);\n      }\n    };\n  }\n\n  componentDidMount() {\n    getNotes(notes => {\n      this.setState({\n        notes: notes\n      }, () => {\n        console.log(\"state notes :\", this.state.notes);\n      });\n    });\n  }\n\n  render() {\n    console.log(\"Dashboardprops_in_parsing  = \", this.props);\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, React.createElement(ClickAwayforNotes, {\n      boards: this.state.boards,\n      createNewBoard: this.createNewBoard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }), React.createElement(Typography, {\n      style: {\n        marginLeft: 300,\n        background\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, \"Pinned\"), React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'orange',\n        display: 'flex',\n        //width: '80%',\n        maxWidth: '60%',\n        marginLeft: 300,\n        flexDirection: this.props.gridOrList == true ? 'row' : 'column',\n        flexWrap: 'wrap'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, this.state.notes !== null && Object.getOwnPropertyNames(this.state.notes).map(key => this.state.notes[key].archiveStatus === false && this.state.notes[key].trashStatus === false && this.state.notes[key].pinStatus === true && React.createElement(List, {\n      notes: this.state.notes[key],\n      nkey: key,\n      handleArchiveStatusChange: this.handleArchiveStatusTrue,\n      handleTrashStatusChange: this.handleTrashStatusTrue,\n      handlePinStatusChange: this.handlePinStatusTrue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }))), React.createElement(Typography, {\n      style: {\n        marginLeft: 300\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, \"Others\"), React.createElement(\"div\", {\n      style: {\n        backgroundColor: 'orange',\n        display: 'flex',\n        //width: '80%',\n        maxWidth: '60%',\n        marginLeft: 300,\n        flexDirection: this.props.gridOrList == true ? 'row' : 'column',\n        flexWrap: 'wrap',\n        marginTop: 10\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, this.state.notes !== null && Object.getOwnPropertyNames(this.state.notes).map(key => this.state.notes[key].archiveStatus === false && this.state.notes[key].trashStatus === false && this.state.notes[key].pinStatus === false && React.createElement(List, {\n      notes: this.state.notes[key],\n      nkey: key,\n      handleArchiveStatusChange: this.handleArchiveStatusTrue,\n      handleTrashStatusChange: this.handleTrashStatusTrue,\n      handlePinStatusChange: this.handlePinStatusTrue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    gridOrList: state.gridOrList\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    toggleGridorList: () => dispatch(toggleGridorList())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteInputandOutput);","map":{"version":3,"sources":["/Users/rakesh/Desktop/newsignup/src/components/Pages/Parsing.js"],"names":["React","ClickAwayforNotes","toggleGridorList","Board","connect","newPostRef","List","data","createUserNote","getNotes","updateNote","Typography","NoteInputandOutput","Component","state","boards","notes","archiveStatus","pinStatus","trashStatus","handleTrashStatusTrue","noteId","obj","getNodeObj","handlePinStatusTrue","TorF","handleArchiveStatusTrue","nodeObj","createNewBoard","board","uid","localStorage","getItem","console","log","ref","push","setState","error","componentDidMount","render","props","marginLeft","background","backgroundColor","display","maxWidth","flexDirection","gridOrList","flexWrap","Object","getOwnPropertyNames","map","key","marginTop","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React from 'react';\nimport ClickAwayforNotes from '../ClickAwayforNotes.js'\nimport { toggleGridorList } from '../UsingRedux'\nimport Board from '../Board'\nimport { connect } from 'react-redux'\nimport { newPostRef } from '/Users/rakesh/Desktop/newsignup/src/firebase.js'\nimport List from '/Users/rakesh/Desktop/newsignup/src/components/List.js'\nimport data from '/Users/rakesh/Desktop/newsignup/src/sampleData.js'\nimport { createUserNote, getNotes, updateNote } from '/Users/rakesh/Desktop/newsignup/src/firebase.js'\nimport { Typography } from '@material-ui/core';\n\n\nclass NoteInputandOutput extends React.Component {\n    state = {\n        boards: [],\n        notes: null,\n        archiveStatus: false,\n        pinStatus: false,\n        trashStatus: false,\n    }\n\n    handleTrashStatusTrue = (noteId) => {\n        let obj = this.getNodeObj();\n        obj.trashStatus = true;\n        updateNote(noteId, obj)\n    }\n\n    handlePinStatusTrue = (noteId,TorF) => {\n        let obj = this.getNodeObj();\n        obj.pinStatus = TorF;\n        updateNote(noteId, obj)\n    }\n\n    handleArchiveStatusTrue = (noteId) => {\n        let obj = this.getNodeObj();\n        obj.archiveStatus = true;\n        updateNote(noteId, obj)\n    }\n\n    getNodeObj = () => {\n        var nodeObj = {\n            pinStatus: this.state.pinStatus,\n            archiveStatus: this.state.archiveStatus,\n            trashStatus: this.state.trashStatus\n        }\n        return nodeObj;\n    } \n    \n    componentDidMount(){\n        getNotes((notes) => {\n            this.setState({\n                notes: notes\n            },() => {\n                console.log(\"state notes :\", this.state.notes)\n            })\n        })\n    }\n        \n    createNewBoard = async (board) => {\n        try {\n            const uid = localStorage.getItem('uid')\n            console.log('app : ' + uid);\n            newPostRef.ref('/users /' + uid + '/notes/').push(board)         \n            this.setState({ boards: [...this.state.boards, board] })\n        }\n        catch (error) {\n            console.error('Error creating new board: ', error)\n        }\n    }\n\nrender(){\n    console.log(\"Dashboardprops_in_parsing  = \", this.props)\n    return(\n        <div>\n            <ClickAwayforNotes \n                boards={this.state.boards}\n                createNewBoard={this.createNewBoard}\n            />  \n            <Typography style={{ marginLeft: 300,background }}>Pinned</Typography>\n        \n            <div\n                style={{\n                    \n                    backgroundColor: 'orange',\n                    display: 'flex',\n                    //width: '80%',\n                    maxWidth: '60%',\n                    marginLeft:300,\n                    flexDirection: this.props.gridOrList == true ? 'row' : 'column',\n                    flexWrap: 'wrap'\n                }}\n            \n                \n            >\n                {       this.state.notes !== null &&\n                        Object.getOwnPropertyNames(this.state.notes).map((key) => (\n                        this.state.notes[key].archiveStatus === false &&\n                        this.state.notes[key].trashStatus === false &&\n                        this.state.notes[key].pinStatus === true &&\n                        <List\n                            notes={this.state.notes[key]}\n                            nkey={key}\n                            handleArchiveStatusChange={this.handleArchiveStatusTrue}\n                            handleTrashStatusChange={this.handleTrashStatusTrue} \n                            handlePinStatusChange={this.handlePinStatusTrue}                           \n                        />\n                    ))}            \n            </div>\n\n            <Typography style={{ marginLeft: 300,}}>Others</Typography>\n            <div \n                style={{\n                    backgroundColor: 'orange',\n                    display: 'flex',\n                    //width: '80%',\n                    maxWidth: '60%',\n                    marginLeft: 300,\n                    flexDirection: this.props.gridOrList == true ? 'row' : 'column',\n                    flexWrap: 'wrap',\n                    marginTop: 10,\n                    \n                }}\n            >\n          \n           {        this.state.notes !== null && \n                    Object.getOwnPropertyNames(this.state.notes).map((key) => (\n                    this.state.notes[key].archiveStatus === false &&\n                    this.state.notes[key].trashStatus === false &&\n                    this.state.notes[key].pinStatus === false &&\n\n                <List \n                    notes={this.state.notes[key]}\n                    nkey={key}\n                    handleArchiveStatusChange={this.handleArchiveStatusTrue}\n                    handleTrashStatusChange={this.handleTrashStatusTrue}\n                    handlePinStatusChange={this.handlePinStatusTrue}\n                />\n            ))}\n            </div>\n           \n\n        </div>\n    )\n}\n\n\n\n}\n\nconst mapStateToProps = state => {\n    return {\n        gridOrList: state.gridOrList\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n        toggleGridorList: () => dispatch(toggleGridorList())\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteInputandOutput)\n\n\n"]},"metadata":{},"sourceType":"module"}