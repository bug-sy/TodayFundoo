{"ast":null,"code":"var _jsxFileName = \"/Users/rakesh/Desktop/newsignup/src/components/AuthContext.js\";\nimport React from 'react';\nimport { firebaseAuth } from '../firebase';\nimport { boardsRef, newPostRef } from '../firebase';\nconst AuthContext = React.createContext();\n\nclass AuthProvider extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: {},\n      emailerror: '',\n      emailError: [],\n      passwordError: [],\n      passworderror: ''\n    };\n\n    this.signUp = async (email, password, e) => {\n      console.log(email);\n      e.preventDefault();\n      await firebaseAuth.createUserWithEmailAndPassword(email, password).then(success => {\n        console.log(JSON.stringify(success));\n      }).catch(err => {\n        if (!email || !password) {\n          if (!email && !password) {\n            this.setState({\n              emailerror: \"please enter email\",\n              emailError: [true],\n              passworderror: \"please enter password\",\n              passwordError: [true]\n            });\n          } else if (!email) {\n            this.setState({\n              emailerror: \"please enter email\",\n              emailError: [true]\n            });\n          } else if (!password) {\n            this.setState({\n              passworderror: \"please enter password\",\n              passwordError: [true]\n            });\n          }\n        } else {\n          console.log(JSON.stringify(err));\n        }\n      });\n    };\n\n    this.logIn = async (email, password, e) => {\n      e.preventDefault();\n      await firebaseAuth.signInWithEmailAndPassword(email, password).then(success => {\n        console.log(\"uid\" + success.user.uid);\n        localStorage;\n      }).catch(err => {\n        if (!email || !password) {\n          if (!email && !password) {\n            this.setState({\n              emailerror: \"please enter email\",\n              emailError: [true],\n              passworderror: \"please enter password\",\n              passwordError: [true]\n            });\n          } else if (!email) {\n            this.setState({\n              emailerror: \"please enter email\",\n              emailError: [true]\n            });\n          } else if (!password) {\n            this.setState({\n              passworderror: \"please enter password\",\n              passwordError: [true]\n            });\n          }\n        } else {\n          this.setState({\n            passworderror: \"wrong password,press reset password\",\n            passwordError: [true]\n          });\n        }\n\n        console.log(JSON.stringify(err));\n      });\n    };\n  }\n\n  //starting of the input user \n  componentDidMount() {\n    firebaseAuth.onAuthStateChanged(user => {\n      if (user) {\n        this.setState({\n          user: {\n            id: user.uid,\n            email: user.email\n          }\n        });\n      } else {\n        this.setState({\n          user: {}\n        });\n      }\n    });\n  } //ending of the input user\n  //---------------\n  //Signup method start \n\n\n  //Signin method end \n  //-----------------\n  /////render method\n  render() {\n    return React.createElement(AuthContext.Provider, {\n      value: {\n        user: this.state.user,\n        signUp: this.signUp,\n        logIn: this.logIn,\n        error: this.state.emailerror,\n        emailError: this.state.emailError[0],\n        password: this.state.passworderror,\n        passwordError: this.state.passwordError[0]\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 155\n      },\n      __self: this\n    }, this.props.children);\n  } //render method ends \n\n\n} //class ends here\n\n\nconst AuthConsumer = AuthContext.Consumer;\nexport { AuthProvider, AuthConsumer };","map":{"version":3,"sources":["/Users/rakesh/Desktop/newsignup/src/components/AuthContext.js"],"names":["React","firebaseAuth","boardsRef","newPostRef","AuthContext","createContext","AuthProvider","Component","state","user","emailerror","emailError","passwordError","passworderror","signUp","email","password","e","console","log","preventDefault","createUserWithEmailAndPassword","then","success","JSON","stringify","catch","err","setState","logIn","signInWithEmailAndPassword","uid","localStorage","componentDidMount","onAuthStateChanged","id","render","error","props","children","AuthConsumer","Consumer"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { firebaseAuth } from '../firebase'\nimport { boardsRef, newPostRef } from '../firebase'\n\nconst AuthContext = React.createContext()\n\nclass AuthProvider extends React.Component{\n    state =\n    {\n        user:{},\n        emailerror: '',\n        emailError:[],\n        passwordError:[],\n        passworderror:'',\n    }\n\n//starting of the input user \ncomponentDidMount() {\n    firebaseAuth.onAuthStateChanged((user) => {\n        if (user) {\n                this.setState({\n                    user: {\n                        id: user.uid,\n                        email: user.email\n                    }\n                })\n\n        }\n        else \n        {\n                this.setState({\n                        user: {}\n                        })\n                    }\n                })\n        }\n\n\n//ending of the input user\n//---------------\n//Signup method start \nsignUp = async (email, password, e) => \n{\n    console.log(email)\n    e.preventDefault()\n    await firebaseAuth.createUserWithEmailAndPassword(\n        email,\n        password\n        ).then((success) => {\n                console.log(JSON.stringify(success))})\n                .catch((err) => \n        {\n                \n        if (!email || !password) \n        {\n                    if (!email && !password) \n                    {\n                        this.setState({\n                            emailerror: \"please enter email\",\n                            emailError: [true],\n                            passworderror: \"please enter password\",\n                            passwordError: [true]\n\n\n                        })\n                    }\n\n                    else if (!email) \n                    {\n                            this.setState({\n                                emailerror: \"please enter email\",\n                                emailError: [true],\n\n\n                            })\n                    }\n\n                    else if (!password) \n                    {\n                        this.setState({\n                            passworderror: \"please enter password\",\n                            passwordError: [true]\n                        })\n                    }                   \n        } \n\n        else\n        {\n               console.log(JSON.stringify(err))\n        }\n        })\n}\n\n//Signup method end\n//------------------------\n/////////Signin method start \nlogIn = async (email, password, e) => \n{\n    e.preventDefault()\n    await  firebaseAuth.signInWithEmailAndPassword(\n        email,\n        password,\n    ).then((success) => {\n\n    console.log(\"uid\" + success.user.uid)\n    localStorage\n    }).catch((err) =>{\n\n    if (!email || !password) \n    {\n\n                                if (!email && !password) \n                                {\n                                        this.setState({\n                                        emailerror: \"please enter email\",\n                                        emailError: [true],\n                                        passworderror: \"please enter password\",\n                                        passwordError: [true]\n                                        })\n                                    }\n                                    else if (!email) {\n                                        this.setState({\n                                        emailerror: \"please enter email\",\n                                        emailError: [true],\n                                        })\n                                    }\n                                    else if (!password) \n                                    {\n                                        this.setState({\n                                        passworderror: \"please enter password\",\n                                        passwordError: [true]\n                                        })\n                                    }\n\n                                }\n                                else \n                                {\n                                        this.setState({\n                                            passworderror: \"wrong password,press reset password\",\n                                            passwordError: [true]\n                                        })\n                                }\n                            console.log(JSON.stringify(err))\n\n    })\n                    }\n\n\n\n//Signin method end \n//-----------------\n/////render method\nrender(){\n        return(\n            <AuthContext.Provider\n                value={{\n                user: this.state.user,\n                signUp: this.signUp,\n                logIn: this.logIn,\n                error: this.state.emailerror,\n                emailError: this.state.emailError[0],\n                password: this.state.passworderror,\n                passwordError: this.state.passwordError[0],\n\n            }}>\n            {this.props.children}\n            </AuthContext.Provider>\n            )\n        }\n//render method ends \n        }\n//class ends here\n\nconst AuthConsumer = AuthContext.Consumer\nexport { AuthProvider, AuthConsumer }"]},"metadata":{},"sourceType":"module"}