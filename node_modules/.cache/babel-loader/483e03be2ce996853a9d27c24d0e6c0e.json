{"ast":null,"code":"var _jsxFileName = \"/Users/rakesh/Desktop/newsignup/src/components/Pages/Parsing.js\";\nimport React from 'react';\nimport Dashboard from '/Users/rakesh/Desktop/newsignup/src/components/clickAwayforNotes.js';\nimport Board from '../Board';\nimport { newPostRef } from '/Users/rakesh/Desktop/newsignup/src/firebase.js';\nimport List from '/Users/rakesh/Desktop/newsignup/src/components/List.js';\nimport data from '/Users/rakesh/Desktop/newsignup/src/sampleData.js';\nimport { createUserNote, getNotes, updateNote } from '/Users/rakesh/Desktop/newsignup/src/firebase.js';\n\nclass NoteInputandOutput extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      boards: [],\n      notes: null,\n      archiveStatus: false,\n      pinStatus: false,\n      trashStatus: false\n    };\n\n    this.handleTrashStatusTrue = noteId => {\n      let obj = this.getNodeObj();\n      obj.trashStatus = true;\n      updateNote(noteId, obj);\n    };\n\n    this.handleArchiveStatusTrue = noteId => {\n      let obj = this.getNodeObj();\n      obj.archiveStatus = true;\n      updateNote(noteId, obj);\n    };\n\n    this.getNodeObj = () => {\n      var nodeObj = {\n        pinStatus: this.state.pinStatus,\n        archiveStatus: this.state.archiveStatus,\n        trashStatus: this.state.trashStatus\n      };\n      return nodeObj;\n    };\n\n    this.createNewBoard = async board => {\n      try {\n        const uid = localStorage.getItem('uid');\n        console.log('app : ' + uid);\n        newPostRef.ref('/users /' + uid + '/notes/').push(board);\n        this.setState({\n          boards: [...this.state.boards, board]\n        });\n      } catch (error) {\n        console.error('Error creating new board: ', error);\n      }\n    };\n  }\n\n  componentDidMount() {\n    getNotes(notes => {\n      this.setState({\n        notes: notes\n      }, () => {\n        console.log(\"state notes :\", this.state.notes);\n      });\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(Dashboard, {\n      boards: this.state.boards,\n      createNewBoard: this.createNewBoard,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), this.state.notes !== null && Object.getOwnPropertyNames(this.state.notes).map((key, index) => this.state.notes[key].archiveStatus === false && this.state.notes[key].trashStatus === false && React.createElement(List, {\n      notes: this.state.notes[key],\n      nkey: key,\n      handleArchiveStatusChange: this.handleArchiveStatusTrue,\n      handleTrashStatusChange: this.handleTrashStatusTrue,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    })));\n  }\n\n}\n\nexport default NoteInputandOutput;","map":{"version":3,"sources":["/Users/rakesh/Desktop/newsignup/src/components/Pages/Parsing.js"],"names":["React","Dashboard","Board","newPostRef","List","data","createUserNote","getNotes","updateNote","NoteInputandOutput","Component","state","boards","notes","archiveStatus","pinStatus","trashStatus","handleTrashStatusTrue","noteId","obj","getNodeObj","handleArchiveStatusTrue","nodeObj","createNewBoard","board","uid","localStorage","getItem","console","log","ref","push","setState","error","componentDidMount","render","Object","getOwnPropertyNames","map","key","index"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Dashboard from '/Users/rakesh/Desktop/newsignup/src/components/clickAwayforNotes.js'\nimport Board from '../Board'\nimport { newPostRef } from '/Users/rakesh/Desktop/newsignup/src/firebase.js'\nimport List from '/Users/rakesh/Desktop/newsignup/src/components/List.js'\nimport data from '/Users/rakesh/Desktop/newsignup/src/sampleData.js'\nimport { createUserNote, getNotes, updateNote } from '/Users/rakesh/Desktop/newsignup/src/firebase.js'\n\n\nclass NoteInputandOutput extends React.Component {\n\n    state = {\n        boards: [],\n        notes: null,\n        archiveStatus: false,\n        pinStatus: false,\n        trashStatus: false,\n    }\n\n\n    handleTrashStatusTrue = (noteId) => {\n        let obj = this.getNodeObj();\n        obj.trashStatus = true;\n        updateNote(noteId, obj)\n    }\n\n    handleArchiveStatusTrue = (noteId) => {\n        let obj = this.getNodeObj();\n        obj.archiveStatus = true;\n        updateNote(noteId, obj)\n    }\n\n    getNodeObj = () => {\n        var nodeObj = {\n            pinStatus: this.state.pinStatus,\n            archiveStatus: this.state.archiveStatus,\n            trashStatus: this.state.trashStatus\n        }\n        return nodeObj;\n    } \n    \n    componentDidMount() {\n        getNotes((notes) => {\n            this.setState({\n                notes: notes\n            }, () => {\n                console.log(\"state notes :\", this.state.notes)\n            })\n        })\n    }\n        \n\n    \n\n    createNewBoard = async (board) => {\n        try {\n\n            const uid = localStorage.getItem('uid')\n            console.log('app : ' + uid);\n            newPostRef.ref('/users /' + uid + '/notes/').push(board)\n         \n            this.setState({ boards: [...this.state.boards, board] })\n        }\n        catch (error) {\n            console.error('Error creating new board: ', error)\n        }\n    }\n\nrender(){\n    return(\n        <div>\n            <Dashboard\n             \n                boards={this.state.boards}\n                createNewBoard={this.createNewBoard}\n            />\n           {this.state.notes !== null && \n                     Object.getOwnPropertyNames(this.state.notes).map((key,index) => (\n                         this.state.notes[key].archiveStatus === false &&\n                         this.state.notes[key].trashStatus === false &&\n                <List \n                    notes={this.state.notes[key]}\n                    nkey={key}\n                    handleArchiveStatusChange={this.handleArchiveStatusTrue}\n                             handleTrashStatusChange={this.handleTrashStatusTrue}\n                />\n            ))}\n           \n\n        </div>\n    )\n}\n\n\n\n}\n\nexport default NoteInputandOutput\n\n\n"]},"metadata":{},"sourceType":"module"}