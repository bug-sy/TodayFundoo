{"ast":null,"code":"var _jsxFileName = \"/Users/rakesh/Desktop/newsignup/src/components/AuthContext.js\";\nimport React from 'react';\nimport { firebaseAuth } from '../firebase';\nconst AuthContext = React.createContext();\n\nclass AuthProvider extends React.Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      user: {},\n      emailerror: '',\n      emailError: [],\n      passwordError: [],\n      passworderror: ''\n    };\n\n    this.signUp = async (email, password, e) => {\n      try {\n        console.log(email);\n        await e.preventDefault();\n        firebaseAuth.createUserWithEmailAndPassword(email, password);\n      } catch (error) {\n        if (!email || !password) {\n          if (!email && !password) {\n            this.setState({\n              emailerror: \"please enter email\",\n              emailError: [true],\n              passworderror: \"please enter password\",\n              passwordError: [true]\n            });\n          } else if (!email) {\n            this.setState({\n              emailerror: \"please enter email\",\n              emailError: [true]\n            });\n          } else if (!password) {\n            this.setState({\n              passworderror: \"please enter password\",\n              passwordError: [true]\n            });\n          }\n        }\n      }\n    };\n\n    this.logIn = async (email, password, e) => {\n      try {\n        e.preventDefault();\n        await firebaseAuth.signInWithEmailAndPassword(email, password).then(success => {\n          console.log(JSON.stringify(success));\n        });\n      } catch (error) {\n        if (!email || !password) {\n          if (!email && !password) {\n            this.setState({\n              emailerror: \"please enter email\",\n              emailError: [true],\n              passworderror: \"please enter password\",\n              passwordError: [true]\n            });\n          } else if (!email) {\n            this.setState({\n              emailerror: \"please enter email\",\n              emailError: [true]\n            });\n          } else if (!password) {\n            this.setState({\n              passworderror: \"please enter password\",\n              passwordError: [true]\n            });\n          }\n        } else {\n          this.setState({\n            passworderror: \"wrong password,press reset password\",\n            passwordError: [true]\n          });\n        }\n      }\n    };\n  }\n\n  //starting of the input user \n  componentDidMount() {\n    firebaseAuth.onAuthStateChanged(user => {\n      if (user) {\n        this.setState({\n          user: {\n            id: user.uid,\n            email: user.email\n          }\n        });\n      } else {\n        this.setState({\n          user: {}\n        });\n      }\n    });\n  } //ending of the input user\n  //Signup method start \n\n\n  //Signin method end \n  //-----------------\n  /////render method\n  render() {\n    return React.createElement(AuthContext.Provider, {\n      value: {\n        user: this.state.user,\n        signUp: this.signUp,\n        logIn: this.logIn,\n        error: this.state.emailerror,\n        emailError: this.state.emailError[0],\n        password: this.state.passworderror,\n        passwordError: this.state.passwordError[0]\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 182\n      },\n      __self: this\n    }, this.props.children);\n  } //render method ends \n\n\n} //class ends here\n\n\nconst AuthConsumer = AuthContext.Consumer;\nexport { AuthProvider, AuthConsumer };","map":{"version":3,"sources":["/Users/rakesh/Desktop/newsignup/src/components/AuthContext.js"],"names":["React","firebaseAuth","AuthContext","createContext","AuthProvider","Component","state","user","emailerror","emailError","passwordError","passworderror","signUp","email","password","e","console","log","preventDefault","createUserWithEmailAndPassword","error","setState","logIn","signInWithEmailAndPassword","then","success","JSON","stringify","componentDidMount","onAuthStateChanged","id","uid","render","props","children","AuthConsumer","Consumer"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { firebaseAuth } from '../firebase'\n\nconst AuthContext = React.createContext()\n\nclass AuthProvider extends React.Component{\n    state ={\n        user:{},\n        emailerror: '',\n        emailError:[],\n        passwordError:[],\n        passworderror:'',\n}\n\n//starting of the input user \n    componentDidMount() {\n        firebaseAuth.onAuthStateChanged((user) => {\n            if (user) {\n                this.setState({\n                    user: {\n                        id: user.uid,\n                        email: user.email\n                    }\n                })\n\n            }\n            else {\n                this.setState({\n                    user: {}\n                })\n            }\n        })\n    }\n\n\n//ending of the input user\n\n\n\n\n\n//Signup method start \n\n    signUp = async (email, password, e) => {\n    try\n    { \n        console.log(email)\n        await e.preventDefault()\n          firebaseAuth.createUserWithEmailAndPassword(\n                       email,\n                       password\n\n         )\n        \n\n         \n                   \n\n            \n    }\n     catch(error)\n    {\n        if (!email || !password) \n        {\n\n                    if (!email && !password) \n                    {\n                        this.setState({\n                            emailerror: \"please enter email\",\n                            emailError: [true],\n                            passworderror: \"please enter password\",\n                            passwordError: [true]\n\n\n                        })\n                    }\n\n                    else if (!email) \n                    {\n                            this.setState({\n                                emailerror: \"please enter email\",\n                                emailError: [true],\n\n\n                            })\n                    }\n\n\n                    else if (!password) \n                    {\n                        this.setState({\n                            passworderror: \"please enter password\",\n                            passwordError: [true]\n                        })\n\n\n                    }\n        }\n    }   }\n\n//Signup method end\n//------------------------\n/////////Signin method start \n    logIn = async (email, password, e) => {\n\n\n                try{\n\n                        e.preventDefault()\n                        await  firebaseAuth.signInWithEmailAndPassword(\n                            email,\n                            password,\n                        ).then((success) => {\n                            console.log(JSON.stringify(success))\n\n                        })\n                    \n                    }\n\n                    \n                catch (error) {\n\n\n                    if (!email || !password) \n                    {\n\n                        if (!email && !password) {\n\n\n\n                            this.setState({\n                      emailerror: \"please enter email\",\n                            emailError: [true],\n                            passworderror: \"please enter password\",\n                            passwordError: [true]\n\n\n\n                        })\n                    }\n\n                                    else if (!email) {\n                                this.setState({\n                                    emailerror: \"please enter email\",\n                                    emailError: [true],\n\n\n                                })\n                            }\n\n                            else if (!password) {\n                                this.setState({\n                                    passworderror: \"please enter password\",\n                                    passwordError: [true]\n                                })\n\n                                }\n\n                            }  \n                        else{\n\n                            this.setState({\n                                passworderror: \"wrong password,press reset password\",\n                                passwordError: [true]\n                            })\n                        }      \n\n                    }\n\n\n\n\n        }\n\n\n\n//Signin method end \n//-----------------\n/////render method\n    render() {\n        return(\n            <AuthContext.Provider\n                value={{\n                user: this.state.user,\n                signUp: this.signUp,\n                logIn: this.logIn,\n                error: this.state.emailerror,\n             emailError: this.state.emailError[0],\n             password: this.state.passworderror,\n             passwordError: this.state.passwordError[0],\n\n            }}>\n            {this.props.children}\n            </AuthContext.Provider>\n            )\n        }\n//render method ends \n\n}\n//class ends here\n\nconst AuthConsumer = AuthContext.Consumer\nexport { AuthProvider, AuthConsumer }"]},"metadata":{},"sourceType":"module"}